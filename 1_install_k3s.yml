---
- name: Install K3s on Raspberry Pi Cluster
  hosts: k8s
  become: true

  tasks:
  
    - name: Disable swap completely
      shell: |
        dphys-swapfile swapoff
        dphys-swapfile uninstall
        update-rc.d dphys-swapfile remove
        swapoff -a
        sed -i '/ swap / s/^/#/' /etc/fstab
      ignore_errors: yes

    - name: Update bootloader if necessary
      shell: |
        sudo update-initramfs -u
      register: bootloader_updated

    - name: Update package list
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - curl
          - apt-transport-https
          - software-properties-common

    - name: Download and execute K3s install script
      shell: |
        curl -sfL https://get.k3s.io/ -o /tmp/k3s-install.sh
        K3S_URL=https://{{ hostvars[groups['k8s_controlplane'][0]]['ansible_host'] }}:6443 \
        K3S_TOKEN=<your_token_here> \
        INSTALL_K3S_VERSION=v1.31.0+k3s1 sh /tmp/k3s-install.sh \
        --write-kubeconfig-mode 644 \
        --tls-san {{ hostvars[groups['k8s_controlplane'][0]]['ansible_host'] }} \
        --datastore-endpoint sqlite:///var/lib/rancher/k3s/server/db.sqlite
      args:
        creates: /usr/local/bin/k3s

    - name: Ensure that SQLite is configured (default)
      shell: |
        if grep -q 'etcd' /etc/rancher/k3s/k3s.yaml; then
          echo "K3s is using etcd, which is incorrect."
          exit 1
        fi
      register: sqlite_check
      failed_when: "'K3s is using etcd' in sqlite_check.stdout"

    - name: Verify K3s installation
      command: k3s --version
      register: k3s_version_check

    - name: Fail if K3s is not installed
      fail:
        msg: "K3s installation failed"
      when: k3s_version_check.rc != 0

    - name: Reboot the system if necessary (excluding controlplane1)
      reboot:
        msg: "Rebooting after disabling swap"
      when: bootloader_updated.changed and inventory_hostname != 'controlplane1'

    - name: Start K3s service on controlplane nodes
      service:
        name: k3s
        state: started
        enabled: yes
      when: inventory_hostname in groups['k8s_controlplane']

    - name: Set a common K3s token on all nodes
      copy:
        content: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
        dest: /var/lib/rancher/k3s/server/node-token
      become: yes
